"""
Django settings for finnhub_project project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURE_HSTS_INCLUDE_SUBDOMAINS: If True, the SecurityMiddleware will add the includeSubDomains tag to the HTTP Strict Transport
# Security header. It has security implications including preventing your site from being accessed over an insecure connection.
SECURE_HSTS_INCLUDE_SUBDOMAINS = False

# SECURE_HSTS_PRELOAD: If True, the SecurityMiddleware will add the preload directive to the HTTP Strict Transport Security header.
# This is an opt-in feature and has serious implications. Only use this when you're sure all subdomains of your domain should be
# served exclusively via SSL.
SECURE_HSTS_PRELOAD = False

# SECURE_HSTS_SECONDS: The number of seconds a browser should remember that this site is only to be accessed using HTTPS.
# SECURE_HSTS_SECONDS = 60

# Redirect all non-HTTPS requests to HTTPS
# SECURE_SSL_REDIRECT: If True, the SecurityMiddleware will redirect all non-HTTPS requests to HTTPS (except for those URLs matching
# a regular expression listed in SECURE_REDIRECT_EXEMPT).
SECURE_SSL_REDIRECT = False

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY: This is the secret key for this particular Django installation. Used to provide cryptographic signing, and should be set
# to a unique, unpredictable value.
SECRET_KEY = os.getenv("SECRET_KEY")

# Ensures that the session and CSRF cookie is only sent over HTTPS
# SESSION_COOKIE_SECURE: If True, the session cookie will be marked as “secure,” which means browsers may ensure that the cookie is
# only sent with an HTTPS connection.
SESSION_COOKIE_SECURE = False

# CSRF_COOKIE_SECURE: If True, the CSRF cookie will be marked as “secure,” which means browsers may ensure that the cookie is only sent
# under an HTTPS connection.
CSRF_COOKIE_SECURE = False

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG: A boolean that turns on/off debug mode. When it is True, the server will provide detailed error pages. If False, the server
# will provide generic error pages.
DEBUG = True

# ALLOWED_HOSTS: A list of strings representing the host/domain names that this Django site can serve. This is a security measure to
# prevent HTTP Host header attacks, which are possible even under many seemingly-safe web server configurations.
ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "finnhub_app",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Content Security Policy (CSP) settings
# CSP is a security measure that helps prevent Cross-Site Scripting (XSS) attacks.
# It does this by specifying the domains that the browser should consider to be valid sources of executable scripts.
# A CSP compatible browser will then only execute scripts loaded in source files received from those whitelisted domains.
# Here, we set the default source to 'self', which means only use resources from the current origin (same scheme, host and port).

ROOT_URLCONF = "finnhub_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "finnhub_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),  # The name of the database
        "USER": os.getenv("DB_USER"),  # The username for the PostgreSQL user
        "PASSWORD": os.getenv("DB_PASSWORD"),  # The password for the PostgreSQL user
        "HOST": os.getenv(
            "DB_HOST"
        ),  # The host where the PostgreSQL server is running on
        "PORT": os.getenv(
            "DB_PORT"
        ),  # The port where the PostgreSQL server is listening
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# List of password hashing algorithms that Django will use to store passwords.
# The first hasher in the list is the default hasher that Django will use.
PASSWORD_HASHERS = [
    # Argon2 is a password hashing algorithm that won the Password Hashing Competition in 2015.
    # It is designed to be resistant to a number of known attacks and provides a high degree of customization.
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    # PBKDF2 (Password-Based Key Derivation Function 2) is a key stretching algorithm that Django uses by default.
    # It is compliant with NIST recommendations.
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    # PBKDF2SHA1 is a variant of PBKDF2 that uses SHA1 as the pseudorandom function.
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    # BCryptSHA256PasswordHasher is a password hasher that uses the BCrypt algorithm, with a SHA256 hash used to preprocess the password.
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    # BCryptPasswordHasher is a password hasher that uses the BCrypt algorithm.
    "django.contrib.auth.hashers.BCryptPasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


LOGIN_URL = "login"
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "login"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
